{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","console","log","cardsArray","map","user","index","key","SearchBox","searchChange","title","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","CounterButton","updateCount","count","nextProps","nextState","backgroundColor","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRequest","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e54e86bf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name , email}) =>\r\n{\r\n\treturn(\r\n\t\t<div className = 'tc bg-light-green  dib br3 pa3 ma2 bw2 grow shadow-5'>\r\n\t\t\t<img src ={`https://robohash.org/${id}`} alt='robots'/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\nexport default Card;","\timport React from 'react';\r\n\timport Card from './Card';\r\n\tconst CardList =({ robots }) =>{\r\n\t\tconsole.log('CardList');\r\n\t\t//To try \"ErrorBoundary\" component\r\n\t\t// if(true)\r\n\t\t// {\r\n\t\t// \tthrow new Error('nooo');\r\n\t\t// }\r\n\t\tconst cardsArray = robots.map((user , index) =>{\r\n\t\t\treturn (<Card \r\n\t\t\tkey={robots[index].id} \r\n\t\t\tid={robots[index].id} \r\n\t\t\tname={robots[index].name} \r\n\t\t\temail={robots[index].email}/>\r\n\t\t\t);\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{cardsArray}\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\r\n\t\r\n\r\n\texport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>\r\n{\r\n\tconsole.log('SearchBox');\r\n\treturn(\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input \r\n\t\t\t\t title=\"Here you can see something\"\r\n\t\t\t\t className = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\t type='search'\r\n\t\t\t\t placeholder='Search robots'\r\n\t\t\t\t onChange = {searchChange}\r\n\t\t     />\r\n\t\t</div>\t \r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error , info){\r\n\t\tthis.setState({ hasError: true});\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1> Ooops. That's not good! </h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Scroll = (props) =>\r\n{\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border:'0px solid black' , height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\nexport default Scroll;","import React , { Component } from 'react';\r\n\r\nclass CounterButton extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state ={\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n\tshouldComponentUpdate(nextProps, nextState){\r\n\t\t// console.log(nextProps, nextState);\r\n\t\t// return true;\r\n\t\tif(this.state.count !== nextState.count){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false; \r\n\t}\r\n\r\n\tupdateCount =() =>{\r\n\t\tthis.setState((state,props) =>{\r\n\t\t\t// 'props' argument takes component props\r\n\t\t\t// console.log('props',props)\r\n\t\t\treturn {count : state.count+1}\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\tconsole.log('CounterButton');\r\n\t\treturn(\r\n\t\t\t\t<button  style={{backgroundColor:`${this.props.color}`}} onClick={this.updateCount}>\r\n\t\t\t\t\tCount: {this.state.count}\r\n\t\t\t\t</button>\r\n\t\t\t);\r\n \t}\r\n}\r\n\r\nexport default CounterButton;","import React , { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component{\r\n\t// shouldComponentUpdate(nextProps, nextState){\r\n\t// \treturn false; \r\n\t// }\r\n\t\r\n\trender(){\r\n\t\tconsole.log('Header');\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<CounterButton color={'red'} />\r\n\t\t\t</div>\r\n\t\t\t);\r\n \t}\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport { changeSearchField , requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn{\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn{\r\n\t\tonSearchChange: (event) => dispatch(changeSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\n\r\nclass App extends Component{\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst {searchField, onSearchChange , robots ,isPending} = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n   \t    return robot.name.toLowerCase().includes(searchField.toLowerCase())})\r\n    \t\r\n    \treturn (isPending) ?\r\n    \t\t <h1 className='tc'> Loading </h1>\r\n    \t\t :\r\n\t\t\t(\r\n\t\t\t<div className = 'tc'>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<SearchBox searchChange = {onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\t\t\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_FAILED,\r\n\tREQUEST_ROBOTS_SUCCESS \r\n} from './constants';\r\n\r\nexport const changeSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD ,\r\n\tpayload: text\t\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(res => res.json())\r\n\t\t.then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_FAILED,\r\n\tREQUEST_ROBOTS_SUCCESS \r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch , action = {}) =>{\r\n\tswitch(action.type){\r\n\t\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\t\treturn Object.assign({} , state , {searchField: action.payload})\r\n\t\t\tdefault:\r\n\t\t\t\treturn state;\r\n\t\t}\r\n}\r\n\r\nconst initialStateRequest = {\r\n\tisPending: true,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRequest ,action ={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({} , state, {isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({} , state,{isPending: false, robots: action.payload})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({} , state,{isPending: false, error: action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n\t,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n "],"sourceRoot":""}